<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
	<title>In-depth Explanation</title>
	<link href="../css/trailblazer_main.css" rel="stylesheet" type="text/css" />
</head>

<body>

<div id="main">
  <div class="trail">
    <div class="numbox">5</div>
    <h2>Conversations</h2>
    <img src="../img/header_line.gif" />
    
    <p>
       <center>
       <form>
          <INPUT type="button" value="Close Window" onClick="window.close()">
       </form>
       </center>
    </p>

    <p>
       The hotel booking "wizard" is implemented by a conversation-scoped
       stateful session bean. The <code>HotelBookingAction</code> maintains
       state associated with the booking process in the Seam conversation
       scope. This ensures that if the user is working in multiple brower
       tabs or multiple brower windows, the various conversations are
       completely isolated from each other.
    </p>
    <p>
       To see this working in practice, right click on the "View Hotel" button 
       in the search screen and select "open in new tab" or "open in new window",
       and try working on multiple hotel bookings simultaneously.
    </p>
    
<code class="block">
@Stateful
@Name("hotelBooking")
@Conversational(ifNotBegunOutcome="main")
@LoggedIn
public class HotelBookingAction implements HotelBooking
{
   
   @PersistenceContext(type=EXTENDED)
   private EntityManager em;
   
   @In(required=false) @Out
   private Hotel hotel;
   
   @In(required=false) 
   @Out(required=false)
   @Valid
   private Booking booking;
   
   @In
   private User user;
   
   @In(create=true)
   private transient FacesMessages facesMessages;
      
   @In(required=false)
   private BookingList bookingList;
   
   @RequestParameter
   private Long hotelId; 
   
   @Begin
   public String selectHotel()
   {
      if (hotelId!=null)
      {
         hotel = em.find(Hotel.class, hotelId);
         return "hotel";
      }
      else
      {
         return null;
      }
   }
   
   public String bookHotel()
   {      
      booking = new Booking(hotel, user);
      Calendar calendar = Calendar.getInstance();
      booking.setCheckinDate( calendar.getTime() );
      calendar.add(Calendar.DAY_OF_MONTH, 1);
      booking.setCheckoutDate( calendar.getTime() );
      
      return "book";
   }

   @IfInvalid(outcome=REDISPLAY)
   public String setBookingDetails()
   {
      if (booking==null || hotel==null) return "main";
      if ( !booking.getCheckinDate().before( booking.getCheckoutDate() ) )
      {
         facesMessages.add("Check out date must be later than check in date");
         return null;
      }
      else
      {
         return "confirm";
      }
   }

   @End
   public String confirm()
   {
      if (booking==null || hotel==null) return "main";
      em.persist(booking);
      if (bookingList!=null) bookingList.refresh();
      facesMessages.add("Thank you, #{user.name}, your confimation number for #{hotel.name} is #{booking.id}");
      //hotels=null;
      return "confirmed";
   }
   
   @End
   public String cancel()
   {
      return "main";
   }
   
   @Destroy @Remove
   public void destroy() {}

}</code>

    <p>
       The conversation begins when <code>selectHotel()</code> is called, and ends when 
       <code>confirm()</code> or <code>cancel()</code> is called.
    </p>

    <p>
       <center>
       <form>
          <INPUT type="button" value="Close Window" onClick="window.close()">
       </form>
       </center>
    </p>

  </div>
</div>

</body>
</html>
